{"username":"","email":"","country":"","name":"","city":"","website":"","job_title":"","github_url":"https://github.com/VoltK","gh_uid":"","li_uid":"","linkedin_url":"","jobs_consent":"true","personal_first_name":"","personal_last_name":"","timezone":"","is_professional":false,"preferred_lang":"python3","hackos":523,"favorite_challenges":[],"challenges_created":[],"other_emails":[],"all_schools":[],"snippets":[],"submissions":[{"contest":"Master","challenge":"Solve Me First","code":"\n\ndef solveMeFirst(a,b):\n\treturn a + b\n\n\nnum1 = int(input())\nnum2 = int(input())\nres = solveMeFirst(num1,num2)\nprint(res)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Simple Array Sum","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the simpleArraySum function below.\n#\ndef simpleArraySum(ar):\n    return sum(ar)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = simpleArraySum(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the compareTriplets function below.\ndef compareTriplets(a, b):\n    index = 0\n    result = []\n    while index \u003c len(a) - 1:\n        if a[index] \u003e b[index]:\n            result[0] += 1\n        elif a[index] \u003c b[index]:\n            result[1] += 1\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = compareTriplets(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the compareTriplets function below.\ndef compareTriplets(a, b):\n    index = 0\n    result = [0, 0]\n    while index \u003c len(a):\n        if a[index] \u003e b[index]:\n            result[0] += 1\n        elif a[index] \u003c b[index]:\n            result[1] += 1\n        index += 1\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = compareTriplets(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"A Very Big Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the aVeryBigSum function below.\ndef aVeryBigSum(ar):\n    return sum(ar)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = aVeryBigSum(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"A Very Big Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the aVeryBigSum function below.\ndef aVeryBigSum(ar):\n    return sum(ar)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = aVeryBigSum(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Diagonal Difference","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the diagonalDifference function below.\ndef diagonalDifference(arr):\n        d1 = sum(arr[x][x] for x in range(len(arr)))\n        d2 = sum(arr[x][-x-1] for x in range(len(arr)))\n        return abs(d1 - d2)\n\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    arr = []\n\n    for _ in range(n):\n        arr.append(list(map(int, input().rstrip().split())))\n\n    result = diagonalDifference(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Plus Minus","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the plusMinus function below.\ndef plusMinus(arr):\n    results = {'positive': 0, 'negative': 0, 'zero': 0}\n    for x in arr:\n        if x \u003e 0:\n            results['positive'] += 1\n        elif x \u003c 0:\n            results['negative'] += 1\n        else:\n            results['zero'] += 1\n    print(round(results['positive']/len(arr), 6))\n    print(round(results['negative']/len(arr), 6))\n    print(round(results['zero']/len(arr), 6))\n\n    \n\n\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    plusMinus(arr)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Staircase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the staircase function below.\ndef staircase(n):\n    for x in range(1, n+1):\n        n -= 1\n\n        print(n * \" \" + x * \"#\")\n\nif __name__ == '__main__':\n    n = int(input())\n\n    staircase(n)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Staircase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the staircase function below.\ndef staircase(n):\n    for x in range(1, n+1):\n        n -= 1\n\n        print(n * \" \" + x * \"#\")\n\nif __name__ == '__main__':\n    n = int(input())\n\n    staircase(n)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mini-Max Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the miniMaxSum function below.\ndef miniMaxSum(arr):\n    total = sum(arr)\n    print(total - max(arr), total - min(arr))\n\n\nif __name__ == '__main__':\n    arr = list(map(int, input().rstrip().split()))\n\n    miniMaxSum(arr)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Birthday Cake Candles","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the birthdayCakeCandles function below.\ndef birthdayCakeCandles(ar):\n    return ar.count(max(ar))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = birthdayCakeCandles(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        new = int(s[:2]) + s[2:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        new = int(s[:2]) + s[2:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        new = str(int(s[:2])) + s[2:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        new = s[:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.555555555556,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        if s[:2] == '12':\n            new = \"00\" + s[2:-2]\n        else:\n            new = s[:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.888888888889,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        if s[:2] == '12'\n            new = [:-2]\n        else:\n            new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        if s[:2] == '12':\n            new = \"00\" + s[2:-2]\n        else:\n            new = s[:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        if s[:2] == '12'\n            new = [:-2]\n        else:\n            new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        if s[:2] == '12':\n            new = \"00\" + s[2:-2]\n        else:\n            new = s[:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        if s[:2] == '12':\n            new = [:-2]\n        else:\n            new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        if s[:2] == '12':\n            new = \"00\" + s[2:-2]\n        else:\n            new = s[:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        if s[:2] == '12':\n            new = s[:-2]\n        else:\n            new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        if s[:2] == '12':\n            new = \"00\" + s[2:-2]\n        else:\n            new = s[:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    if s.endswith('PM'):\n        if s[:2] == '12':\n            new = s[:-2]\n        else:\n            new = str(int(s[:2]) + 12) + s[2:-2]\n    else:\n        if s[:2] == '12':\n            new = \"00\" + s[2:-2]\n        else:\n            new = s[:-2]\n    return new\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the weightedUniformStrings function below.\ndef weightedUniformStrings(s, queries):\n    alpha = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12, 'm':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18, 's':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n\n    scores = set()\n    ctr=1\n    for i in range(len(s)):\n        score = alpha[s[i]]\n        ctr = ctr+1 if (i+1 != len(s) and s[i+1] == s[i]) else 1\n        scores.add(score*ctr)\n    result = []\n    for x in queries:\n        if x in scores:\n            result.append('Yes')\n        else:\n            result.append('No')\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    queries_count = int(input())\n\n    queries = []\n\n    for _ in range(queries_count):\n        queries_item = int(input())\n        queries.append(queries_item)\n\n    result = weightedUniformStrings(s, queries)\n\n    fptr.write('\\n'.join(result))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the weightedUniformStrings function below.\ndef weightedUniformStrings(s, queries):\n    alpha = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12, 'm':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18, 's':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n\n    scores = set()\n    ctr=1\n    for i in range(len(s)):\n        score = alpha[s[i]]\n        ctr = ctr+1 if (i+1 != len(s) and s[i+1] == s[i]) else 1\n        scores.add(score*ctr)\n    result = []\n    for x in queries:\n        if x in scores:\n            result.append('Yes')\n        else:\n            result.append('No')\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    queries_count = int(input())\n\n    queries = []\n\n    for _ in range(queries_count):\n        queries_item = int(input())\n        queries.append(queries_item)\n\n    result = weightedUniformStrings(s, queries)\n\n    fptr.write('\\n'.join(result))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Grading Students","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the gradingStudents function below.\n#\ndef gradingStudents(grades):\n    updated = []\n\n    for grade in grades:\n        if grade \u003c 38:\n            updated.append(grade)\n        else:\n            mult_5 = (x for x in range(grade, 101) if x % 5 == 0)\n            for mult in mult_5:\n                if mult - grade \u003c 3:\n                    rounded = grade + (mult - grade)\n                    updated.append(rounded)\n                elif mult - grade == 3:\n                    updated.append(grade)\n\n         \n    return updated\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    grades = []\n\n    for _ in range(n):\n        grades_item = int(input())\n        grades.append(grades_item)\n\n    result = gradingStudents(grades)\n\n    f.write('\\n'.join(map(str, result)))\n    f.write('\\n')\n\n    f.close()\n","score":0.181818181818,"language":"python3"},{"contest":"Master","challenge":"Grading Students","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the gradingStudents function below.\n#\ndef gradingStudents(grades):\n    updated = []\n\n    for grade in grades:\n        if grade \u003c 38:\n            updated.append(grade)\n        else:\n            mult_5 = (x for x in range(grade, grade + 5) if x % 5 == 0)\n            for mult in mult_5:\n                if mult - grade \u003c 3:\n                    rounded = grade + (mult - grade)\n                    updated.append(rounded)\n                elif mult - grade == 3:\n                    updated.append(grade)\n\n         \n    return updated\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    grades = []\n\n    for _ in range(n):\n        grades_item = int(input())\n        grades.append(grades_item)\n\n    result = gradingStudents(grades)\n\n    f.write('\\n'.join(map(str, result)))\n    f.write('\\n')\n\n    f.close()\n","score":0.181818181818,"language":"python3"},{"contest":"Master","challenge":"Grading Students","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the gradingStudents function below.\n#\ndef gradingStudents(grades):\n    updated = []\n\n    for grade in grades:\n        if grade \u003c 38:\n            updated.append(grade)\n        else:\n            mult_5 = (x for x in range(grade, grade + 5) if x % 5 == 0)\n            for mult in mult_5:\n                if mult - grade \u003c 3:\n                    rounded = grade + (mult - grade)\n                    updated.append(rounded)\n                elif mult - grade == 3 or mult -grade == 4:\n                    updated.append(grade)\n\n         \n    return updated\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    grades = []\n\n    for _ in range(n):\n        grades_item = int(input())\n        grades.append(grades_item)\n\n    result = gradingStudents(grades)\n\n    f.write('\\n'.join(map(str, result)))\n    f.write('\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Grading Students","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the gradingStudents function below.\n#\ndef gradingStudents(grades):\n    updated = []\n\n    for grade in grades:\n        if grade \u003c 38:\n            updated.append(grade)\n        else:\n            mult_5 = (x for x in range(grade, grade + 5) if x % 5 == 0)\n            for mult in mult_5:\n                if mult - grade \u003c 3:\n                    rounded = grade + (mult - grade)\n                    updated.append(rounded)\n                elif mult - grade \u003e= 3:\n                    updated.append(grade)\n    return updated\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    grades = []\n\n    for _ in range(n):\n        grades_item = int(input())\n        grades.append(grades_item)\n\n    result = gradingStudents(grades)\n\n    f.write('\\n'.join(map(str, result)))\n    f.write('\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Grading Students","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the gradingStudents function below.\n#\ndef gradingStudents(grades):\n    updated = []\n\n    for grade in grades:\n        if grade \u003c 38:\n            updated.append(grade)\n        else:\n            mult_5 = (x for x in range(grade, grade + 5) if x % 5 == 0)\n            for mult in mult_5:\n                if mult - grade \u003c 3:\n                    rounded = grade + (mult - grade)\n                    updated.append(rounded)\n                elif mult - grade \u003e= 3:\n                    updated.append(grade)\n    return updated\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    grades = []\n\n    for _ in range(n):\n        grades_item = int(input())\n        grades.append(grades_item)\n\n    result = gradingStudents(grades)\n\n    f.write('\\n'.join(map(str, result)))\n    f.write('\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Grading Students","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the gradingStudents function below.\n#\ndef gradingStudents(grades):\n    updated = []\n\n    for grade in grades:\n        if grade \u003c 38:\n            updated.append(grade)\n        else:\n            mult_5 = (x for x in range(grade, grade + 5) if x % 5 == 0)\n            for mult in mult_5:\n                if mult - grade \u003c 3:\n                    rounded = grade + (mult - grade)\n                    updated.append(rounded)\n                elif mult - grade \u003e= 3:\n                    updated.append(grade)\n    return updated\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    grades = []\n\n    for _ in range(n):\n        grades_item = int(input())\n        grades.append(grades_item)\n\n    result = gradingStudents(grades)\n\n    f.write('\\n'.join(map(str, result)))\n    f.write('\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Apple and Orange","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the countApplesAndOranges function below.\ndef countApplesAndOranges(s, t, a, b, apples, oranges):\n\n    fall_apple = [a + x for x in apples]\n    fall_orange = [b + x for x in oranges]\n\n    total = {'apples': 0, 'oranges': 0}\n\n    for apple in fall_apple:\n        if apple in list(range(s, t+1)):\n            total['apples'] += 1\n    \n    for orange in fall_orange:\n        if orange in list(range(s, t+1)):\n            total['oranges'] += 1\n    \n    print(total['apples'])\n    print(total['oranges'])\n\n\n\nif __name__ == '__main__':\n    st = input().split()\n\n    s = int(st[0])\n\n    t = int(st[1])\n\n    ab = input().split()\n\n    a = int(ab[0])\n\n    b = int(ab[1])\n\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    apples = list(map(int, input().rstrip().split()))\n\n    oranges = list(map(int, input().rstrip().split()))\n\n    countApplesAndOranges(s, t, a, b, apples, oranges)\n","score":0.181818181818,"language":"python3"},{"contest":"Master","challenge":"Apple and Orange","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the countApplesAndOranges function below.\ndef countApplesAndOranges(s, t, a, b, apples, oranges):\n\n    fall_apple = [a + x for x in apples]\n    fall_orange = [b + x for x in oranges]\n\n    total = {'apples': 0, 'oranges': 0}\n\n    for apple in fall_apple:\n        if apple in list(range(s, t+1)):\n            total['apples'] += 1\n    \n    for orange in fall_orange:\n        if orange in list(range(s, t+1)):\n            total['oranges'] += 1\n    \n    print(total['apples'])\n    print(total['oranges'])\n\n\n\nif __name__ == '__main__':\n    st = input().split()\n\n    s = int(st[0])\n\n    t = int(st[1])\n\n    ab = input().split()\n\n    a = int(ab[0])\n\n    b = int(ab[1])\n\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    apples = list(map(int, input().rstrip().split()))\n\n    oranges = list(map(int, input().rstrip().split()))\n\n    countApplesAndOranges(s, t, a, b, apples, oranges)\n","score":0.181818181818,"language":"python3"},{"contest":"Master","challenge":"Apple and Orange","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the countApplesAndOranges function below.\ndef countApplesAndOranges(s, t, a, b, apples, oranges):\n\n    fall_apple = [a + x for x in apples]\n    fall_orange = [b + x for x in oranges]\n\n    total = {'apples': 0, 'oranges': 0}\n\n    for apple in fall_apple:\n        if apple in range(s, t+1):\n            total['apples'] += 1\n    \n    for orange in fall_orange:\n        if orange in range(s, t+1):\n            total['oranges'] += 1\n    \n    print(total['apples'])\n    print(total['oranges'])\n\n\n\nif __name__ == '__main__':\n    st = input().split()\n\n    s = int(st[0])\n\n    t = int(st[1])\n\n    ab = input().split()\n\n    a = int(ab[0])\n\n    b = int(ab[1])\n\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    apples = list(map(int, input().rstrip().split()))\n\n    oranges = list(map(int, input().rstrip().split()))\n\n    countApplesAndOranges(s, t, a, b, apples, oranges)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Apple and Orange","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the countApplesAndOranges function below.\ndef countApplesAndOranges(s, t, a, b, apples, oranges):\n\n    fall_apple = [a + x for x in apples]\n    fall_orange = [b + x for x in oranges]\n\n    total = {'apples': 0, 'oranges': 0}\n\n    for apple in fall_apple:\n        if apple in range(s, t+1):\n            total['apples'] += 1\n    \n    for orange in fall_orange:\n        if orange in range(s, t+1):\n            total['oranges'] += 1\n    \n    print(total['apples'])\n    print(total['oranges'])\n\n\n\nif __name__ == '__main__':\n    st = input().split()\n\n    s = int(st[0])\n\n    t = int(st[1])\n\n    ab = input().split()\n\n    a = int(ab[0])\n\n    b = int(ab[1])\n\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    apples = list(map(int, input().rstrip().split()))\n\n    oranges = list(map(int, input().rstrip().split()))\n\n    countApplesAndOranges(s, t, a, b, apples, oranges)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Say \"Hello, World!\" With Python","code":"print(\"Hello, World!\")\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nn = int(input())\n\nif n % 2 != 0: print('Weird')\nelif n % 2 == 0 and n in range(2, 6): print(\"Not Weird\")\nelif n % 2 == 0 and n in range(6, 21): print(\"Weird\")\nelif n % 2 == 0 and n \u003e 20: print('Not Weird')","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arithmetic Operators","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(a+b)\n    print(a-b)\n    print(a*b)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python: Division","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(a//b)\n    print(a/b)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Loops","code":"if __name__ == '__main__':\n    n = int(input())\n    for n in range(0, n):\n        print(n**2)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    \n    if year % 4 == 0 and year % 100 != 0 and year % 400 == 0: leap = True\n    \n    return leap\n\n","score":0.4,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    \n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0: leap = True\n    \n    return leap\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Print Function","code":"if __name__ == '__main__':\n    n = int(input())\n    for x in range(1,n+1):\n        print(x, end=\"\")\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Floor, Ceil and Rint","code":"import numpy\nnumpy.set_printoptions(sign=' ')\n\na = numpy.array(input().split(),float)\n\nprint(numpy.floor(a))\nprint(numpy.ceil(a))\nprint(numpy.rint(a))","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sum and Prod","code":"import numpy\n\nN, M = map(int, input().split())\nA = numpy.array([input().split() for _ in range(N)],int)\nprint(numpy.prod(numpy.sum(A, axis=0), axis=0))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sum and Prod","code":"import numpy\n\nN, M = map(int, input().split())\nA = numpy.array([input().split() for _ in range(N)],int)\nprint(numpy.prod(numpy.sum(A, axis=0), axis=0))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n\n    coordinates = [[i, j, k] for i in range(x+1) for j in range(y+1) for k in range(z+1)       if (i+j+k) != n]\n    print(coordinates)","score":1.0,"language":"python3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n\n    coordinates = [[i, j, k] for i in range(x+1) for j in range(y+1) for k in range(z+1)       if (i+j+k) != n]\n    print(coordinates)","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    first = max(arr)\n\n    for x in arr:\n        if x == first:\n            arr.remove(x)\n    print(max(arr))\n    \n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    uniq = set(arr)\n    uniq.remove(max(uniq))\n    print(max(uniq))\n    \n    \n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    uniq = set(arr)\n    uniq.remove(max(uniq))\n    print(max(uniq))\n    \n    \n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Nested Lists","code":"if __name__ == '__main__':\n    gradelist = []\n\n    for _ in range(int(input())):\n        gradelist.append([input(),float(input())])\n\n    second_lowest = sorted(set([grade for name, grade in gradelist]))[1]\n\n    for name, grade in sorted(gradelist):\n        if grade == second_lowest:\n            print(name)\n           \n\n        \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Finding the percentage","code":"if __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n\n    avg = \"%.2f\" % float(sum(student_marks[query_name])/ len(student_marks[query_name]))\n    print(avg)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Finding the percentage","code":"if __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n\n    avg = \"%.2f\" % float(sum(student_marks[query_name])/ len(student_marks[query_name]))\n    print(avg)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nk,arr = int(input()),list(map(int, input().split()))\nrooms = {}\nfor x in arr:\n    if str(x) not in rooms:\n        rooms[str(x)] = 1\n    else:\n        rooms[str(x)] += 1\nfor key, value in rooms.items():\n    if value == 1:\n        print(key)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nk,arr = int(input()),list(input().split())\nrooms = {}\nfor x in arr:\n    if x not in rooms:\n        rooms[x] = 1\n    else:\n        rooms[x] += 1\n\nprint(*[key for key, value in rooms.items() if value == 1])\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n\n    def handle_starttag(self, tag, attrs):\n        if tag.startswith(\"\u003c!\") or tag.endswith(\"-\u003e\"):\n            pass\n        else: \n            print(\"Start :\", tag)\n            if len(attrs) \u003e 0:\n                for name, value in attrs:\n                        print(f\"-\u003e {name} \u003e {value}\")\n                \n\n    def handle_endtag(self, tag):\n     \n        print(\"End   :\", tag)\n        #check_attrs(attrs)\n\n    def handle_startendtag(self, tag, attrs):\n      \n        print(\"Empty :\", tag)\n        #check_attrs(attrs)\n\n\nparser = MyHTMLParser()\n\nfor _ in range(int(input())):\n    parser.feed(input())\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n\n    def handle_starttag(self, tag, attrs):\n        if tag.startswith(\"\u003c!\") or tag.endswith(\"-\u003e\"):\n            pass\n        else: \n            print(\"Start :\", tag)\n            if len(attrs) \u003e 0:\n                for name, value in attrs:\n                        print(f\"-\u003e {name} \u003e {value}\")\n                \n\n    def handle_endtag(self, tag):\n        if tag.startswith(\"\u003c!\") or tag.endswith(\"-\u003e\"):\n            pass\n        else: print(\"End   :\", tag)\n        #check_attrs(attrs)\n\n    def handle_startendtag(self, tag, attrs):\n        if tag.startswith(\"\u003c!\") or tag.endswith(\"-\u003e\"):\n            pass\n        else: print(\"Empty :\", tag)\n        #check_attrs(attrs)\n\n\nparser = MyHTMLParser()\n\nfor _ in range(int(input())):\n    parser.feed(input())\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n\n    def handle_starttag(self, tag, attrs):\n        if tag.startswith(\"\u003c!\") or tag.endswith(\"-\u003e\"):\n            pass\n        else: \n            print(\"Start :\", tag)\n            if len(attrs) \u003e 0:\n                for name, value in attrs:\n                        print(f\"-\u003e {name} \u003e {value}\")\n                \n\n    def handle_endtag(self, tag):\n        if tag.startswith(\"\u003c!\") or tag.endswith(\"-\u003e\"):\n            pass\n        else: print(\"End   :\", tag)\n        #check_attrs(attrs)\n\n    def handle_startendtag(self, tag, attrs):\n        if tag.startswith(\"\u003c!\") or tag.endswith(\"-\u003e\"):\n            pass\n        else: print(\"Empty :\", tag)\n        #check_attrs(attrs)\n\n\nparser = MyHTMLParser()\n\nfor _ in range(int(input())):\n    parser.feed(input())\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n\n    def handle_starttag(self, tag, attrs):\n       print(\"Start :\", tag)\n            if len(attrs) \u003e 0:\n                for name, value in attrs:\n                        print(f\"-\u003e {name} \u003e {value}\")\n                \n\n    def handle_endtag(self, tag):\n        print(\"End   :\", tag)\n        #check_attrs(attrs)\n\n    def handle_startendtag(self, tag, attrs):\n     \n        print(\"Empty :\", tag)\n        #check_attrs(attrs)\n\n\nparser = MyHTMLParser()\n\nfor _ in range(int(input())):\n    parser.feed(input())\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n\n    def handle_starttag(self, tag, attrs):\n       print(\"Start :\", tag)\n        if len(attrs) \u003e 0:\n            for name, value in attrs:\n                print(f\"-\u003e {name} \u003e {value}\")\n                \n\n    def handle_endtag(self, tag):\n        print(\"End   :\", tag)\n        #check_attrs(attrs)\n\n    def handle_startendtag(self, tag, attrs):\n     \n        print(\"Empty :\", tag)\n        #check_attrs(attrs)\n\n\nparser = MyHTMLParser()\n\nfor _ in range(int(input())):\n    parser.feed(input())\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n\n    def handle_starttag(self, tag, attrs):\n        print(\"Start :\", tag)\n        if len(attrs) \u003e 0:\n            for name, value in attrs:\n                print(f\"-\u003e {name} \u003e {value}\")\n                \n\n    def handle_endtag(self, tag):\n        print(\"End   :\", tag)\n        #check_attrs(attrs)\n\n    def handle_startendtag(self, tag, attrs):\n     \n        print(\"Empty :\", tag)\n        #check_attrs(attrs)\n\n\nparser = MyHTMLParser()\n\nfor _ in range(int(input())):\n    parser.feed(input())\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n\n    def handle_starttag(self, tag, attrs):\n        print(\"Start :\", tag)\n        if len(attrs) \u003e 0:\n            for name, value in attrs:\n                print(f\"-\u003e {name} \u003e {value}\")\n                \n\n    def handle_endtag(self, tag):\n        print(\"End   :\", tag)\n        #check_attrs(attrs)\n\n    def handle_startendtag(self, tag, attrs):\n     \n        print(\"Empty :\", tag)\n        #check_attrs(attrs)\n\n\nparser = MyHTMLParser()\n\nfor _ in range(int(input())):\n    parser.feed(input())\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n\n    def handle_starttag(self, tag, attrs):\n        print(\"Start :\", tag)\n        self.check_args(attrs)\n                \n\n    def handle_endtag(self, tag):\n        print(\"End   :\", tag)\n        #check_attrs(attrs)\n\n    def handle_startendtag(self, tag, attrs):\n     \n        print(\"Empty :\", tag)\n        self.check_args(attrs)\n\n    def check_args(self, attr):\n        if len(attr) \u003e 0:\n            for name, value in attr:\n                print(f\"-\u003e {name} \u003e {value}\")\n\n\n\nparser = MyHTMLParser()\n\nfor _ in range(int(input())):\n    parser.feed(input())\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"HTML Parser - Part 2","code":"from html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n\n    def handle_comment(self, data):\n        if '\\n' in data:\n            print(f\"\u003e\u003e\u003e Multi-line Comment\\n{data}\")\n        else:\n            print(f\"\u003e\u003e\u003e Single-line Comment\\n{data}\")\n\n    \n    def handle_data(self, data):\n        if data != '\\n':\n            print(f\"\u003e\u003e\u003e Data\\n{data}\")\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nhtml = \"\"       \nfor i in range(int(input())):\n    html += input().rstrip()\n    html += '\\n'\n    \nparser = MyHTMLParser()\nparser.feed(html)\nparser.close()\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Detect HTML Tags, Attributes and Attribute Values","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\n\nclass MyParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        self.runner(tag,attrs)\n\n    def handle_startendtag(self, tag, attrs):\n        self.runner(tag,attrs)\n    \n    def runner(self, tag, attrs):\n        if len(attrs) == 0:\n            print(tag)\n        else:\n            print(tag)\n            for attr, val in attrs:\n                print(f\"-\u003e {attr} \u003e {val}\")\n\n\nparser = MyParser()\nfor _ in range(int(input())):\n    parser.feed(input())\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Security Functions","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the calculate function below.\ndef calculate(x):\n    return x % 11\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    x = int(input())\n\n    result = calculate(x)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Lists","code":"if __name__ == '__main__':\n    N = int(input())\n    commands = []\n    for _ in range(N):\n        commands.append(input().split())\n    output = []\n\n    for command in commands:\n        if command[0] == 'insert':\n            output.insert(int(command[1]), int(command[2]))\n        elif command[0] == 'print':\n            print(output)\n        elif command[0] == 'remove':\n            output.remove(int(command[1]))\n        elif command[0] == 'append':\n            output.append(int(command[1]))\n        elif command[0] == 'sort':\n            output.sort()\n        elif command[0] == 'pop':\n            output.pop()\n        elif command[0] == 'reverse':\n            output.reverse()\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Lists","code":"if __name__ == '__main__':\n    N = int(input())\n    commands = []\n    for _ in range(N):\n        commands.append(input().split())\n    output = []\n\n    for command in commands:\n        if command[0] == 'insert':\n            output.insert(int(command[1]), int(command[2]))\n        elif command[0] == 'print':\n            print(output)\n        elif command[0] == 'remove':\n            output.remove(int(command[1]))\n        elif command[0] == 'append':\n            output.append(int(command[1]))\n        elif command[0] == 'sort':\n            output.sort()\n        elif command[0] == 'pop':\n            output.pop()\n        elif command[0] == 'reverse':\n            output.reverse()\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Compress the String! ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom itertools import groupby\n\ns = input()\n\nfor key, group in groupby(s):\n    print(f\"({len(list(group))}, {key})\", end=\" \")","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Compress the String! ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom itertools import groupby\n\ns = input()\n\n#print(*[(len(list(group)), int(key)) for key, group in groupby(s)])\n\nfor key, group in groupby(s):\n    print(f\"({len(list(group))}, {key})\", end=\" \")\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"XML 1 - Find the Score","code":"\n\ndef get_attr_number(node):\n    # your code goes here\n    counter = 0\n    for child in node.iter():\n        counter += len(child.attrib)\n    return counter\n\n\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Input()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nnums = raw_input().split()\npoly = raw_input().replace('x', nums[0])\n\nif eval(poly) == int(nums[1]):\n    print True\n","score":0.8,"language":"python"},{"contest":"Master","challenge":"Input()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nnums = raw_input().split()\npoly = raw_input().replace('x', nums[0])\n\nif eval(poly) == int(nums[1]):\n    print True\nelse: print False\n","score":1.0,"language":"python"},{"contest":"Master","challenge":"Input()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nnums = raw_input().split()\npoly = raw_input().replace('x', nums[0])\n\nif eval(poly) == int(nums[1]):\n    print True\nelse: print False\n","score":1.0,"language":"python"},{"contest":"Master","challenge":"Input()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nnums = raw_input().split()\npoly = raw_input().replace('x', nums[0])\n\nprint(eval(poly) == int(nums[1]))\n  \n","score":1.0,"language":"python"},{"contest":"Master","challenge":"Python Evaluation","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\neval(input())\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arrays","code":"\n\ndef arrays(arr):\n    # complete this function\n    # use numpy.array\n    return numpy.array(list(reversed(arr)), float)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Shape and Reshape","code":"import numpy\n\narr = numpy.array(input().split(), int)\nprint(numpy.reshape(arr, (3,3)))\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Shape and Reshape","code":"import numpy\n\nprint(numpy.reshape( numpy.array(input().split(), int), (3,3)))\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Shape and Reshape","code":"import numpy\n\nprint(numpy.reshape( numpy.array(input().split(), int), (3,3)))\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Transpose and Flatten","code":"import numpy\n\nlst = []\n\nfor x in range([int(x) for x in input().split()][0]):\n    lst.append(input().split())\n\narr = numpy.array(lst, int)\n\nprint(numpy.transpose(arr), arr.flatten(), sep='\\n' )\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Revising the Select Query I","code":"SELECT * FROM City WHERE POPULATION \u003e 100000 and COUNTRYCODE = 'USA';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Revising the Select Query II","code":"SELECT NAME FROM CITY WHERE POPULATION \u003e 120000 and COUNTRYCODE = 'USA';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Select All","code":"SELECT * FROM City;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Select By ID","code":"SELECT * FROM City WHERE ID = 1661;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Japanese Cities' Attributes","code":"SELECT * FROM City WHERE COUNTRYCODE = 'JPN';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Japanese Cities' Names","code":"SELECT NAME FROM City WHERE COUNTRYCODE  = 'JPN';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 1","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\nSELECT CITY, STATE FROM STATION","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 3","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\nSELECT DISTINCT  CITY FROM STATION WHERE MOD (ID, 2) = 0;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 4","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\nSELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 5","code":"/*\nEnter your query here.\n*/\nselect CITY, length(CITY) from station order by length(CITY), CITY limit 1; \nselect CITY, length(CITY) from station order by length(CITY) desc limit 1;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 6","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION WHERE CITY LIKE 'a%' or CITY LIKE 'e%' or CITY LIKE 'i%' OR CITY LIKE 'o%' or CITY LIKE 'u%';","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 7","code":"/*\nEnter your query here.\n*/\n\nSELECT DISTINCT CITY FROM STATION WHERE CITY LIKE '%a' or CITY LIKE '%e' or CITY LIKE '%i' or CITY LIKE '%o' or CITY LIKE '%u';","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 8","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION\nWHERE CITY REGEXP '^[aeiou].*[aeiou]$';","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 9","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeoiu]';","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 10","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '[aeoiu]$'","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 11","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeoiu].*[aeoiu]$'","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Kangaroo","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the kangaroo function below.\ndef kangaroo(x1, v1, x2, v2):\n    if v2 \u003e v1 and x2 \u003e x1 or v1 \u003e v2 and x1 \u003e x2:\n        return 'NO'\n    else:\n        return 'YES'\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    x1V1X2V2 = input().split()\n\n    x1 = int(x1V1X2V2[0])\n\n    v1 = int(x1V1X2V2[1])\n\n    x2 = int(x1V1X2V2[2])\n\n    v2 = int(x1V1X2V2[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.405405405405,"language":"python3"},{"contest":"Master","challenge":"Kangaroo","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the kangaroo function below.\ndef kangaroo(x1, v1, x2, v2):\n    if v2 \u003e v1 and x2 \u003e x1 or v1 \u003e v2 and x1 \u003e x2:\n        return 'NO'\n    else:\n        for _ in range(10001):\n            x1 += v1\n            x2 += v2\n            if x1 == x2:\n                return 'YES'\n        return 'NO'\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    x1V1X2V2 = input().split()\n\n    x1 = int(x1V1X2V2[0])\n\n    v1 = int(x1V1X2V2[1])\n\n    x2 = int(x1V1X2V2[2])\n\n    v2 = int(x1V1X2V2[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Kangaroo","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the kangaroo function below.\ndef kangaroo(x1, v1, x2, v2):\n    if v2 \u003e v1 and x2 \u003e x1 or v1 \u003e v2 and x1 \u003e x2:\n        return 'NO'\n    else:\n        for _ in range(10001):\n            x1 += v1\n            x2 += v2\n            if x1 == x2:\n                return 'YES'\n        return 'NO'\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    x1V1X2V2 = input().split()\n\n    x1 = int(x1V1X2V2[0])\n\n    v1 = int(x1V1X2V2[1])\n\n    x2 = int(x1V1X2V2[2])\n\n    v2 = int(x1V1X2V2[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Between Two Sets","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the getTotalX function below.\n#\ndef getTotalX(a, b):\n    pos = []\n    for x in range(a[0], b[0] + 1):\n        for num in a:\n            if num % x == 0:\n                pos.append(x)\n    counter = 0\n    for x in pos:\n        for num in range(len(b)-1):\n            if num % x == 0:\n                counter += 1\n    return counter\n\n\n    \n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    total = getTotalX(a, b)\n\n    f.write(str(total) + '\\n')\n\n    f.close()\n","score":0.428571428571,"language":"python3"},{"contest":"Master","challenge":"Between Two Sets","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the getTotalX function below.\n#\ndef getTotalX(a, b):\n    pos = []\n    for x in range(a[0], b[0] + 1):\n        for num in a:\n            if num % x == 0:\n                pos.append(x)\n    counter = 0\n    for x in pos:\n        for ind in range(len(b)-1):\n            if b[ind] % x == 0:\n                counter += 1\n    return counter\n\n\n    \n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    total = getTotalX(a, b)\n\n    f.write(str(total) + '\\n')\n\n    f.close()\n","score":0.285714285714,"language":"python3"},{"contest":"Master","challenge":"Between Two Sets","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the getTotalX function below.\n#\ndef getTotalX(a, b):\n    pos = []\n    for x in range(a[0], b[0] + 1):\n        for num in a:\n            if num % x == 0:\n                pos.append(x)\n    counter = ()\n    for x in pos:\n        for num in b:\n            if num % x == 0:\n                counter.add(x)\n    return len(counter)\n\n\n    \n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    total = getTotalX(a, b)\n\n    f.write(str(total) + '\\n')\n\n    f.close()\n","score":0.285714285714,"language":"python3"},{"contest":"Master","challenge":"Between Two Sets","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the getTotalX function below.\n#\ndef getTotalX(a, b):\n    pos = set()\n    for x in range(a[0], b[0] + 1):\n        for num in a:\n            if num % x == 0:\n                pos.add(x)\n    counter = set()\n    for x in pos:\n        for num in b:\n            if num % x == 0:\n                counter.add(x)\n    return len(counter)\n\n\n    \n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    total = getTotalX(a, b)\n\n    f.write(str(total) + '\\n')\n\n    f.close()\n","score":0.428571428571,"language":"python3"},{"contest":"Master","challenge":"Tuples ","code":"if __name__ == '__main__':\n    n = int(input())\n    integer_list = map(int, input().split())\n    print(hash(tuple(integer_list)))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Tuples ","code":"if __name__ == '__main__':\n    n = int(input())\n    integer_list = map(int, input().split())\n    print(hash(tuple(integer_list)))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Collections.OrderedDict()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import OrderedDict\n\nitems = OrderedDict()\nfor x in range(int(input())):\n    inputs = input().split()\n    if len(inputs) \u003e 2:\n        key = inputs[0]+\" \"+inputs[1]\n        if key in items:\n            items[key] += int(inputs[2])\n        else:\n            items[key] = int(inputs[2])\n    else:\n        #items[inputs[0]] = inputs[1]\n        if inputs[0] in items:\n            items[inputs[0]] += int(inputs[1])\n        else:\n            items[inputs[0]] = int(inputs[1])\n\nfor key, val in items.items():\n    print(key, val)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Collections.OrderedDict()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import OrderedDict\n\nitems = OrderedDict()\nfor x in range(int(input())):\n    inputs = input().split()\n    if len(inputs) \u003e 2:\n        key = inputs[0]+\" \"+inputs[1]\n        items[key] = items.get(key, 0) + int(inputs[2])\n    else:\n        #items[inputs[0]] = inputs[1]\n        items[inputs[0]] = items.get(inputs[0], 0) + int(inputs[1])\n\n\nfor key, val in items.items():\n    print(key, val)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Word Order","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import OrderedDict\n\nwords = OrderedDict()\n\nfor x in range(int(input())):\n    word = input()\n    words[word] = words.get(word, 0) + 1\n\nprint(len(words))\nprint(*words.values(), sep=\" \")","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Collections.deque()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import deque\n\nd = deque()\n\nfor x in range(int(input())):\n    op, _, num = input().partition(\" \")\n    eval(f'd.{op}({num})')\n\nprint(*d)","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Collections.deque()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import deque\n\nd = deque()\n\nfor x in range(int(input())):\n    op, _, num = input().partition(\" \")\n    eval(f'd.{op}({num})')\n\nprint(*d)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Piling Up!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfor x in range(int(input())):\n    elems = len(input().split())\n    if elems % 2 == 0:\n        print(\"Yes\")\n    else:\n        print('No')\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Piling Up!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfor x in range(int(input())):\n    elems = len(input().split())\n    if elems % 2 == 0:\n        print(\"No\")\n    else:\n        print('Yes')\n","score":0.25,"language":"python3"},{"contest":"Master","challenge":"Piling Up!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfor x in range(int(input())):\n    elems = len(input().split(\" \"))\n    if elems % 2 != 0:\n        print(\"Yes\")\n    else:\n        print('No')\n","score":0.25,"language":"python3"},{"contest":"Master","challenge":"sWAP cASE","code":"\nfrom string import ascii_lowercase\n\ndef swap_case(s):\n    new = \"\"\n    for letter in s:\n        if letter in ascii_lowercase:\n            new += letter.upper()\n        else:\n            new += letter.lower()\n    return new\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"sWAP cASE","code":"\nfrom string import ascii_lowercase\n\ndef swap_case(s):\n    new = \"\"\n    for letter in s:\n        if letter in ascii_lowercase:\n            new += letter.upper()\n        else:\n            new += letter.lower()\n    return new\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"String Split and Join","code":"def split_and_join(line):\n    # write your code here\n    return \"-\".join(line.split())\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"What's Your Name?","code":"def print_full_name(a, b):\n    \n    print(f\"Hello {a} {b}! You just delved into python.\")\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"What's Your Name?","code":"def print_full_name(a, b):\n    \n    print(f\"Hello {a} {b}! You just delved into python.\")\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mutations","code":"def mutate_string(string, position, character):\n    return string[:position] + character + string[position+1:]\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    counter = 0\n    for index in range(len(string)):\n        if string[index:index+len(sub_string)] == sub_string:\n            counter += 1\n    return counter\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    counter = 0\n    for index in range(len(string)):\n        if string[index:index+len(sub_string)] == sub_string:\n            counter += 1\n    return counter\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"String Validators","code":"if __name__ == '__main__':\n    s = input()\n    print(s.isalnum())\n    print(s.isalpha())\n    print(s.isdigit())\n    print(s.islower())\n    print(s.isupper())\n\n\n\n","score":0.6,"language":"python3"},{"contest":"Master","challenge":"Birthday Chocolate","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the birthday function below.\ndef birthday(s, d, m):\n    counter = 0\n    for x in range(len(s)):\n        if sum(s[x:x+m]) == d:\n            counter += 1\n    return counter \n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    s = list(map(int, input().rstrip().split()))\n\n    dm = input().rstrip().split()\n\n    d = int(dm[0])\n\n    m = int(dm[1])\n\n    result = birthday(s, d, m)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Divisible Sum Pairs","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the divisibleSumPairs function below.\ndef divisibleSumPairs(n, k, ar):\n    counter = 0\n    for x in range(n):\n        for num in ar[x+1:]:\n            if (ar[x]+ num) % k == 0:\n                counter += 1\n    return counter \n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = divisibleSumPairs(n, k, ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Migratory Birds","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the migratoryBirds function below.\ndef migratoryBirds(arr):\n    counts = {}\n    for x in arr:\n        counts[x] = arr.count(x)\n    big = max(counts.values())\n\n    keys = [key for key, value in counts.items() if value == big]\n\n    return min(keys)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(input().strip())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = migratoryBirds(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.5,"language":"python3"},{"contest":"Master","challenge":"Migratory Birds","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the migratoryBirds function below.\ndef migratoryBirds(arr):\n    counts = {}\n    for x in arr:\n        counts[x] = arr.count(x)\n    big = max(counts.values())\n\n    keys = (key for key, value in counts.items() if value == big)\n\n    return min(keys)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(input().strip())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = migratoryBirds(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.5,"language":"python3"},{"contest":"Master","challenge":"Migratory Birds","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the migratoryBirds function below.\ndef migratoryBirds(arr):\n    counts = {}\n    for x in arr:\n        counts[x] = arr.count(x)\n    \n    keys = (key for key, value in counts.items() if value == max(counts.values()))\n\n    return min(keys)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(input().strip())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = migratoryBirds(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.5,"language":"python3"},{"contest":"Master","challenge":"Breaking the Records","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the breakingRecords function below.\ndef breakingRecords(scores):\n    high = scores[0]\n    low = scores[0]\n    result = {'high':0, 'low':0}\n    for score in scores:\n        if score \u003e high:\n            result['high'] += 1\n            high = score\n        elif score \u003c low:\n            result['low'] += 1\n            low = score\n    return result.values()\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    scores = list(map(int, input().rstrip().split()))\n\n    result = breakingRecords(scores)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Breaking the Records","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the breakingRecords function below.\ndef breakingRecords(scores):\n    high = low = scores[0]\n    result = {'high':0, 'low':0}\n    for score in scores:\n        if score \u003e high:\n            result['high'] += 1\n            high = score\n        elif score \u003c low:\n            result['low'] += 1\n            low = score\n    return result.values()\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    scores = list(map(int, input().rstrip().split()))\n\n    result = breakingRecords(scores)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Breaking the Records","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the breakingRecords function below.\ndef breakingRecords(scores):\n    high = low = scores[0]\n    result = {'high':0, 'low':0}\n    for score in scores:\n        if score \u003e high:\n            result['high'] += 1\n            high = score\n        elif score \u003c low:\n            result['low'] += 1\n            low = score\n    return result.values()\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    scores = list(map(int, input().rstrip().split()))\n\n    result = breakingRecords(scores)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day of the Programmer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport calendar\n\n# Complete the dayOfProgrammer function below.\ndef dayOfProgrammer(year):\n    if calendar.isleap(year):\n        date = f'12.09.{str(year)}'\n    else:\n        date = f'13.09.{str(year)}'\n    return date\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    year = int(input().strip())\n\n    result = dayOfProgrammer(year)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.78,"language":"python3"},{"contest":"Master","challenge":"Day of the Programmer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport calendar\n\n# Complete the dayOfProgrammer function below.\ndef dayOfProgrammer(year):\n    if calendar.isleap(year) or ((year \u003c= 1917) \u0026 (year%4 == 0)):\n        date = f'12.09.{str(year)}'\n    else:\n        date = f'13.09.{str(year)}'\n    return date\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    year = int(input().strip())\n\n    result = dayOfProgrammer(year)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.9,"language":"python3"},{"contest":"Master","challenge":"Day of the Programmer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport calendar\n\n# Complete the dayOfProgrammer function below.\ndef dayOfProgrammer(year):\n    if calendar.isleap(year) or ((year \u003c= 1917) \u0026 (year%4 == 0)):\n        date = f'12.09.{str(year)}'\n    elif year == 1918:\n        date = '26.09.1918'\n    else:\n        date = f'13.09.{str(year)}'\n    return date\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    year = int(input().strip())\n\n    result = dayOfProgrammer(year)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Bon Appétit","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bonAppetit function below.\ndef bonAppetit(bill, k, b):\n    if (sum(bill)- bill[k])/2 == b:\n        print(\"Bon Appetit\")\n    else:\n        print(b - ((sum(bill)- bill[k])/2)))\n\nif __name__ == '__main__':\n    nk = input().rstrip().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    bill = list(map(int, input().rstrip().split()))\n\n    b = int(input().strip())\n\n    bonAppetit(bill, k, b)\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Bon Appétit","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bonAppetit function below.\ndef bonAppetit(bill, k, b):\n    if (sum(bill)- bill[k])/2 == b:\n        print(\"Bon Appetit\")\n    else:\n        print(b - ((sum(bill)- bill[k])/2))\n\nif __name__ == '__main__':\n    nk = input().rstrip().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    bill = list(map(int, input().rstrip().split()))\n\n    b = int(input().strip())\n\n    bonAppetit(bill, k, b)\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Bon Appétit","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bonAppetit function below.\ndef bonAppetit(bill, k, b):\n    if (sum(bill)- bill[k])/2 == b:\n        print(\"Bon Appetit\")\n    else:\n        print(int(b - ((sum(bill)- bill[k])/2)))\n\nif __name__ == '__main__':\n    nk = input().rstrip().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    bill = list(map(int, input().rstrip().split()))\n\n    b = int(input().strip())\n\n    bonAppetit(bill, k, b)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Bon Appétit","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bonAppetit function below.\ndef bonAppetit(bill, k, b):\n    if (sum(bill)- bill[k])/2 == b:\n        print(\"Bon Appetit\")\n    else:\n        print(int(b - ((sum(bill)- bill[k])/2)))\n\nif __name__ == '__main__':\n    nk = input().rstrip().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    bill = list(map(int, input().rstrip().split()))\n\n    b = int(input().strip())\n\n    bonAppetit(bill, k, b)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sock Merchant","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the sockMerchant function below.\ndef sockMerchant(n, ar):\n    pairs = {}\n    for sock in ar:\n        pairs[sock] = pairs.get(sock,0) + 1\n    amount = 0\n    for val in pairs.values():\n        if val != 1:\n            if val % 2 == 0:\n                amount += val // 2\n            else:\n                amount += (val - 1) // 2\n    return amount\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = sockMerchant(n, ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sock Merchant","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the sockMerchant function below.\ndef sockMerchant(n, ar):\n    pairs = {}\n    for sock in ar:\n        pairs[sock] = pairs.get(sock,0) + 1\n    amount = 0\n    for val in pairs.values():\n        if val != 1:\n            if val % 2 == 0:\n                amount += val // 2\n            else:\n                amount += (val - 1) // 2\n    return amount\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = sockMerchant(n, ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Drawing Book ","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the pageCount function below.\n#\ndef pageCount(n, p):\n    counter1 = 0\n    for x in range(1, n):\n        if x == p:\n            break\n        if x % 2 != 0:\n            counter1 += 1\n        \n    counter2 = 0\n    for x in range(n, 0, -1):\n        if x == p:\n            break\n        if  x % 2 == 0:\n            counter2 += 1\n        \n    return min(counter1, counter2)\n\n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    p = int(input())\n\n    result = pageCount(n, p)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Drawing Book ","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the pageCount function below.\n#\ndef pageCount(n, p):\n    counter1 = 0\n    for x in range(1, n):\n        if x == p:\n            break\n        if x % 2 != 0:\n            counter1 += 1\n        \n    counter2 = 0\n    for x in range(n, 0, -1):\n        if x == p:\n            break\n        if  x % 2 == 0:\n            counter2 += 1\n        \n    return min(counter1, counter2)\n\n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    p = int(input())\n\n    result = pageCount(n, p)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sock Merchant","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the sockMerchant function below.\ndef sockMerchant(n, ar):\n    pairs = {}\n    for sock in ar:\n        pairs[sock] = pairs.get(sock,0) + 1\n    amount = 0\n    for val in pairs.values():\n            if val % 2 == 0:\n                amount += val // 2\n            else:\n                amount += (val - 1) // 2\n    return amount\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = sockMerchant(n, ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the countingValleys function below.\ndef countingValleys(n, s):\n    steps = {\"U\": 1, \"D\": -1}\n    valley = 0\n    al = 0\n    for step in s:\n        al += steps[step]\n        if al == 0 and step == \"U\":\n            valley += 1\n    return valley\n\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    result = countingValleys(n, s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the countingValleys function below.\ndef countingValleys(n, s):\n    steps = {\"U\": 1, \"D\": -1}\n    valley = 0\n    al = 0\n    for step in s:\n        al += steps[step]\n        if al == 0 and step == \"U\":\n            valley += 1\n    return valley\n\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    result = countingValleys(n, s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Jumping on the Clouds","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the jumpingOnClouds function below.\ndef jumpingOnClouds(c):\n    jumps, i = 0, 0\n    while i \u003c len(c)-1:\n        if i+2 \u003c len(c) and c[i+2] != 1:\n            i += 1\n        jumps += 1\n        i += 1\n    return jumps\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n\n    n = int(input())\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = jumpingOnClouds(c)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    i = 0\n    while len(s) \u003c n:\n        s += s[i]\n        i += 1\n        if i == len(s):\n            i = 0\n            \n    return s.count('a')\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.235849056604,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    repeat = len(s) % n\n    rest = n % len(s)\n    new = s * repeat + s[:rest]\n    return new.count('a')\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.141509433962,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    i = 0\n    while len(s) \u003c n:\n        s += s[i]\n        i += 1\n        if i == len(s):\n            i = 0\n            \n    return s.count('a')\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.235849056604,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    count = 0\n    for x in range(n):\n            if s[x % len(s)] == \"a\":\n                count += 1\n            \n    return count\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.292452830189,"language":"python3"},{"contest":"Master","challenge":"Arrays: Left Rotation","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import deque\n\n# Complete the rotLeft function below.\ndef rotLeft(a, d):\n    queue = deque(a)\n    #print(queue)\n    queue.rotate(-d)\n    #print(queue)\n    return list(queue)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nd = input().split()\n\n    n = int(nd[0])\n\n    d = int(nd[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = rotLeft(a, d)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arrays: Left Rotation","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import deque\n\n# Complete the rotLeft function below.\ndef rotLeft(a, d):\n    queue = deque(a)\n    queue.rotate(-d)\n    return list(queue)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nd = input().split()\n\n    n = int(nd[0])\n\n    d = int(nd[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = rotLeft(a, d)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"String Validators","code":"if __name__ == '__main__':\n    s = raw_input()\n    for command in ['.isalnum()', '.isalpha()', '.isdigit()', '.islower()', '.isupper()']:\n        print any(eval('c'+command) for c in s)\n        \n            \n\n","score":1.0,"language":"python"},{"contest":"Master","challenge":"Text Wrap","code":"\n\ndef wrap(string, max_width):\n    return \"\\n\".join(string[c:c+max_width] for c in range(0,len(string),max_width))\n\n","score":1.0,"language":"python"},{"contest":"Master","challenge":"Text Wrap","code":"\n\ndef wrap(string, max_width):\n    return \"\\n\".join(string[c:c+max_width] for c in range(0,len(string),max_width))\n\n","score":1.0,"language":"python"},{"contest":"Master","challenge":"String Formatting","code":"def print_formatted(number):\n    width = len(\"{0:b}\".format(n))\n    for i in range(1,n+1):\n        print \"{0:{width}d} {0:{width}o} {0:{width}X} {0:{width}b}\".format(i, width=width)\n    # your code goes here\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"String Formatting","code":"def print_formatted(number):\n    width = len(\"{0:b}\".format(n))\n    for i in range(1,n+1):\n        print \"{0:{width}d} {0:{width}o} {0:{width}X} {0:{width}b}\".format(i,width=width)\n    # your code goes here\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"String Formatting","code":"def print_formatted(number):\n    width = len(\"{0:b}\".format(n))\n    for i in xrange(1,n+1):\n        print \"{0:{width}d} {0:{width}o} {0:{width}X} {0:{width}b}\".format(i, width=width)\n    # your code goes here\n\n","score":1.0,"language":"python"},{"contest":"Master","challenge":"Capitalize!","code":"\nimport string\n# Complete the solve function below.\ndef solve(s):\n    return string.capwords(s)\n\n\n","score":0.2,"language":"python3"},{"contest":"Master","challenge":"Capitalize!","code":"\nimport string\n# Complete the solve function below.\ndef solve(s):\n    return s.title()\n\n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Capitalize!","code":"\nimport string\n# Complete the solve function below.\ndef solve(s):\n    return \" \".join(word[0].capitalize()+word[1:] for word in s.split())\n\n","score":0.2,"language":"python3"},{"contest":"Master","challenge":"Capitalize!","code":"\nimport string\n# Complete the solve function below.\ndef solve(s):\n    return \" \".join(word.capitalize() for word in s.split())\n\n","score":0.2,"language":"python3"},{"contest":"Master","challenge":"Capitalize!","code":"\nimport string\n# Complete the solve function below.\ndef solve(s):\n    return \" \".join(word.capitalize() for word in s.split(\" \"))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Capitalize!","code":"\nimport string\n# Complete the solve function below.\ndef solve(s):\n    return \" \".join(word.capitalize() for word in s.split(\" \"))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"collections.Counter()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import Counter\nshoes = int(input())\nsizes = Counter(map(int, input().split()))\n\nsum_ = 0\n\nfor x in range(int(input())):\n    size, cost = map(int, input().split())\n    if sizes[size]:\n        sum_ += cost\n        sizes[size] -= 1\nprint(sum_)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"DefaultDict Tutorial","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n\na = [input() for x in range(n)]\n\nresult = defaultdict(list)\n\nfor x in range(m):\n    word = input()\n    for ind, element in enumerate(a):\n        if word == element:\n            result[word].append(ind+1)\n\nfor item in result.values():\n    print(*item)\n\n\n\n","score":0.111111111111,"language":"python3"},{"contest":"Master","challenge":"DefaultDict Tutorial","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n\na = [input() for x in range(n)]\n\nresult = defaultdict(list)\n\nfor x in range(m):\n    word = input()\n    for ind, element in enumerate(a):\n        if word == element:\n            result[element].append(ind+1)\n        else:\n            result[word].append(-1)\n\n\n        \n\n\nfor item in result.values():\n    print(*item)\n\n\n\n","score":0.444444444444,"language":"python3"},{"contest":"Master","challenge":"DefaultDict Tutorial","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n\na = [input() for x in range(n)]\n\nresult = defaultdict(list)\n\nfor x in range(m):\n    word = input()\n    if word not in a:\n        result[word] = [-1]\n    else:\n        for ind, element in enumerate(a):\n            if word == element:\n                result[element].append(ind+1)\n\n\n        \n\n\nfor item in result.values():\n    print(*item)\n\n\n\n","score":0.666666666667,"language":"python3"},{"contest":"Master","challenge":"Electronics Shop","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the getMoneySpent function below.\n#\ndef getMoneySpent(keyboards, drives, b):\n    options = -1\n    for key in keyboards:\n        for drive in drives:\n            if drive + key \u003c= b and drive + key \u003e options:\n                options = drive + key\n            else:\n                options = -1\n    return options\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    bnm = input().split()\n\n    b = int(bnm[0])\n\n    n = int(bnm[1])\n\n    m = int(bnm[2])\n\n    keyboards = list(map(int, input().rstrip().split()))\n\n    drives = list(map(int, input().rstrip().split()))\n\n    #\n    # The maximum amount of money she can spend on a keyboard and USB drive, or -1 if she can't purchase both items\n    #\n\n    moneySpent = getMoneySpent(keyboards, drives, b)\n\n    fptr.write(str(moneySpent) + '\\n')\n\n    fptr.close()\n","score":0.357142857143,"language":"python3"},{"contest":"Master","challenge":"Electronics Shop","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the getMoneySpent function below.\n#\ndef getMoneySpent(keyboards, drives, b):\n    options = -1\n    for key in keyboards:\n        for drive in drives:\n            if drive + key \u003c= b and drive + key \u003e= options:\n                options = drive + key\n            else:\n                options = -1\n    return options\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    bnm = input().split()\n\n    b = int(bnm[0])\n\n    n = int(bnm[1])\n\n    m = int(bnm[2])\n\n    keyboards = list(map(int, input().rstrip().split()))\n\n    drives = list(map(int, input().rstrip().split()))\n\n    #\n    # The maximum amount of money she can spend on a keyboard and USB drive, or -1 if she can't purchase both items\n    #\n\n    moneySpent = getMoneySpent(keyboards, drives, b)\n\n    fptr.write(str(moneySpent) + '\\n')\n\n    fptr.close()\n","score":0.357142857143,"language":"python3"},{"contest":"Master","challenge":"Electronics Shop","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the getMoneySpent function below.\n#\ndef getMoneySpent(keyboards, drives, b):\n    options = -1\n    for key in keyboards:\n        for drive in drives:\n            if drive + key \u003c= b and drive + key \u003e= options:\n                options = drive + key\n    return options\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    bnm = input().split()\n\n    b = int(bnm[0])\n\n    n = int(bnm[1])\n\n    m = int(bnm[2])\n\n    keyboards = list(map(int, input().rstrip().split()))\n\n    drives = list(map(int, input().rstrip().split()))\n\n    #\n    # The maximum amount of money she can spend on a keyboard and USB drive, or -1 if she can't purchase both items\n    #\n\n    moneySpent = getMoneySpent(keyboards, drives, b)\n\n    fptr.write(str(moneySpent) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Electronics Shop","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the getMoneySpent function below.\n#\ndef getMoneySpent(keyboards, drives, b):\n    options = -1\n    for key in keyboards:\n        for drive in drives:\n            if drive + key \u003c= b and drive + key \u003e= options:\n                options = drive + key\n    return options\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    bnm = input().split()\n\n    b = int(bnm[0])\n\n    n = int(bnm[1])\n\n    m = int(bnm[2])\n\n    keyboards = list(map(int, input().rstrip().split()))\n\n    drives = list(map(int, input().rstrip().split()))\n\n    #\n    # The maximum amount of money she can spend on a keyboard and USB drive, or -1 if she can't purchase both items\n    #\n\n    moneySpent = getMoneySpent(keyboards, drives, b)\n\n    fptr.write(str(moneySpent) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Cats and a Mouse","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the catAndMouse function below.\ndef catAndMouse(x, y, z):\n    \n    if abs(z-x) \u003c abs(z-y):\n        result = \"Cat A\"\n    elif abs(z-x) \u003e abs(z-y):\n        result = \"Cat B\"\n    else:\n        result = \"Mouse C\"\n    return result\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        xyz = input().split()\n\n        x = int(xyz[0])\n\n        y = int(xyz[1])\n\n        z = int(xyz[2])\n\n        result = catAndMouse(x, y, z)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Cats and a Mouse","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the catAndMouse function below.\ndef catAndMouse(x, y, z):\n    \n    if abs(z-x) \u003c abs(z-y):\n        result = \"Cat A\"\n    elif abs(z-x) \u003e abs(z-y):\n        result = \"Cat B\"\n    else:\n        result = \"Mouse C\"\n    return result\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        xyz = input().split()\n\n        x = int(xyz[0])\n\n        y = int(xyz[1])\n\n        z = int(xyz[2])\n\n        result = catAndMouse(x, y, z)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Picking Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'pickingNumbers' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER_ARRAY a as parameter.\n#\n\ndef pickingNumbers(a):\n    lng = 0\n    for num in a:\n        opt = []\n        for x in range(len(a)-1):\n            if abs(num-a[x+1]) \u003c= 1:\n                opt.append(a[x+1])\n        if len(opt) \u003e lng:\n            lng = len(opt)\n    return lng\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = pickingNumbers(a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.125,"language":"python3"},{"contest":"Master","challenge":"Picking Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'pickingNumbers' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER_ARRAY a as parameter.\n#\n\ndef pickingNumbers(a):\n    lng = 0\n    for num in a:\n        opt = [num]\n        for x in range(len(a)-1):\n            if abs(num-a[x+1]) \u003c= 1:\n                opt.append(a[x+1])\n        if len(opt) \u003e lng:\n            lng = len(opt)\n    return lng\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = pickingNumbers(a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.125,"language":"python3"},{"contest":"Master","challenge":"Picking Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'pickingNumbers' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER_ARRAY a as parameter.\n#\n\ndef pickingNumbers(a):\n    lng = 0\n    for num in a:\n        opt = [num]\n        for x in range(len(a)-1):\n            if abs(num-a[x+1]) \u003c= 1:\n                opt.append(a[x+1])\n        if len(opt) \u003e lng:\n            lng = len(opt)\n    return lng\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = pickingNumbers(a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.125,"language":"python3"},{"contest":"Master","challenge":"Picking Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'pickingNumbers' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER_ARRAY a as parameter.\n#\n\ndef pickingNumbers(a):\n    lng = 0\n    for num in a:\n        opt = [num]\n        for x in range(len(a)-1):\n            if abs(num-a[x+1]) \u003c= 1:\n                opt.append(a[x+1])\n        if len(opt) \u003e lng and len(opt) \u003e= 2:\n            lng = len(opt)\n    return lng\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = pickingNumbers(a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.125,"language":"python3"},{"contest":"Master","challenge":"Picking Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'pickingNumbers' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER_ARRAY a as parameter.\n#\n\ndef pickingNumbers(a):\n    lng = 0\n    for num in a:\n        opt = []\n        for x in range(len(a)-1):\n            if abs(num-a[x+1]) \u003c= 1:\n                opt.append(a[x+1])\n        if len(opt) \u003e lng and len(opt) \u003e= 2:\n            lng = len(opt)\n    return lng\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = pickingNumbers(a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.125,"language":"python3"},{"contest":"Master","challenge":"Picking Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'pickingNumbers' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER_ARRAY a as parameter.\n#\n\ndef pickingNumbers(a):\n    lng = 1\n    for num in a:\n        opt = []\n        for x in range(len(a)-1):\n            if abs(num-a[x+1]) \u003c= 1:\n                opt.append(a[x+1])\n        if len(opt) \u003e lng and len(opt) \u003e= 2:\n            lng = len(opt)\n    return lng\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = pickingNumbers(a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.125,"language":"python3"},{"contest":"Master","challenge":"Migratory Birds","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the migratoryBirds function below.\ndef migratoryBirds(arr):\n    counts = {}\n    for x in arr:\n        counts[x] = arr.count(x)\n    \n    keys = (key for key, value in counts.items() if value == max(counts.values()))\n\n    return min(keys)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(input().strip())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = migratoryBirds(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.5,"language":"python3"},{"contest":"Master","challenge":"The Hurdle Race","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hurdleRace function below.\ndef hurdleRace(k, height):\n    highest = max(height)\n\n    if k \u003e= highest:\n        return 0\n    else:\n        return highest - k\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    height = list(map(int, input().rstrip().split()))\n\n    result = hurdleRace(k, height)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"The Hurdle Race","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hurdleRace function below.\ndef hurdleRace(k, height):\n    return 0 if k \u003e= max(height) else max(height) - k\n    \n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    height = list(map(int, input().rstrip().split()))\n\n    result = hurdleRace(k, height)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"The Hurdle Race","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hurdleRace function below.\ndef hurdleRace(k, height):\n    return 0 if k \u003e= max(height) else max(height) - k\n    \n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    height = list(map(int, input().rstrip().split()))\n\n    result = hurdleRace(k, height)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Designer PDF Viewer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the designerPdfViewer function below.\ndef designerPdfViewer(h, word):\n    tall = 0\n    for letter in word:\n        val = h[ord(letter) - 97]\n        if val \u003e tall:\n            tall = val\n    return tall * len(word)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    h = list(map(int, input().rstrip().split()))\n\n    word = input()\n\n    result = designerPdfViewer(h, word)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Utopian Tree","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the utopianTree function below.\ndef utopianTree(n):\n    tree = 1\n    for x in range(1, n+1):\n        if x % 2 != 0:\n            tree *= 2\n        else:\n            tree += 1\n\n    return tree\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        n = int(input())\n\n        result = utopianTree(n)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Utopian Tree","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the utopianTree function below.\ndef utopianTree(n):\n    tree = 1\n    for x in range(1, n+1):\n        if x % 2 != 0:\n            tree *= 2\n        else:\n            tree += 1\n\n    return tree\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        n = int(input())\n\n        result = utopianTree(n)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Angry Professor","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the angryProfessor function below.\ndef angryProfessor(k, a):\n    in_time = [x for x in a if x \u003c= 0]\n    return 'NO' if len(in_time) \u003e= k else \"YES\"\n    \n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nk = input().split()\n\n        n = int(nk[0])\n\n        k = int(nk[1])\n\n        a = list(map(int, input().rstrip().split()))\n\n        result = angryProfessor(k, a)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Beautiful Days at the Movies","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the beautifulDays function below.\ndef beautifulDays(i, j, k):\n    days = 0\n    for day in range(i, j+1):\n        if (day - int(str(day)[::-1])) % k == 0:\n            days += 1\n    return days\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ijk = input().split()\n\n    i = int(ijk[0])\n\n    j = int(ijk[1])\n\n    k = int(ijk[2])\n\n    result = beautifulDays(i, j, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Beautiful Days at the Movies","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the beautifulDays function below.\ndef beautifulDays(i, j, k):\n    days = 0\n    for day in range(i, j+1):\n        if (day - int(str(day)[::-1])) % k == 0:\n            days += 1\n    return days\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ijk = input().split()\n\n    i = int(ijk[0])\n\n    j = int(ijk[1])\n\n    k = int(ijk[2])\n\n    result = beautifulDays(i, j, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Viral Advertising","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the viralAdvertising function below.\ndef viralAdvertising(n):\n    likes, ads = 0, 5\n    for day in range(n):\n        likes += ads // 2\n        ads = ads // 2 * 3\n    return likes\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    result = viralAdvertising(n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Super Reduced String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the superReducedString function below.\ndef superReducedString(s):\n    new = \"\"\n    for letter in s:\n        if new and new[-1] == letter:\n            new = new[:-1]\n        else:\n            new += letter\n    \n    if new:\n        return new\n    else:\n        return \"Empty String\"\n    \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = superReducedString(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"CamelCase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the camelcase function below.\ndef camelcase(s):\n    if s:\n        words = 1\n        for c in s:\n            if c.isupper():\n                words += 1\n        return words\n    else:\n        return 0\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = camelcase(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strong Password","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the minimumNumber function below.\ndef minimumNumber(n, password):\n    # Return the minimum number of characters to make the password strong\n    count = 0\n    if not any(x.isdigit() for x in password):\n        count += 1\n    if not any(x.isupper() for x in password):\n        count += 1\n    if not any(x.islower() for x in password):\n        count += 1\n    if not any(x in \"!@#$%^\u0026*()-+\" for x in password):\n        count += 1\n    return 6 - n if n \u003c 6 else count\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    password = input()\n\n    answer = minimumNumber(n, password)\n\n    fptr.write(str(answer) + '\\n')\n\n    fptr.close()\n","score":0.875,"language":"python3"},{"contest":"Master","challenge":"Strong Password","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the minimumNumber function below.\ndef minimumNumber(n, password):\n    # Return the minimum number of characters to make the password strong\n    count = 0\n    if not any(x.isdigit() for x in password):\n        count += 1\n    if not any(x.isupper() for x in password):\n        count += 1\n    if not any(x.islower() for x in password):\n        count += 1\n    if not any(x in \"!@#$%^\u0026*()-+\" for x in password):\n        count += 1\n    return 6 - n + count if n + count \u003c 6 else count\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    password = input()\n\n    answer = minimumNumber(n, password)\n\n    fptr.write(str(answer) + '\\n')\n\n    fptr.close()\n","score":0.738636363636,"language":"python3"},{"contest":"Master","challenge":"Strong Password","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the minimumNumber function below.\ndef minimumNumber(n, password):\n    # Return the minimum number of characters to make the password strong\n    count = 0\n    if not any(x.isdigit() for x in password):\n        count += 1\n    if not any(x.isupper() for x in password):\n        count += 1\n    if not any(x.islower() for x in password):\n        count += 1\n    if not any(x in \"!@#$%^\u0026*()-+\" for x in password):\n        count += 1\n    return max(count,6-n)\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    password = input()\n\n    answer = minimumNumber(n, password)\n\n    fptr.write(str(answer) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Two Characters","code":" #!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom itertools import combinations\n\n# Complete the alternate function below.\ndef alternate(s):\n    lng = 0\n    for comb in combinations(set(s), 2):\n       string = \"\".join(x for x in s if x in comb)\n       if all(string[x-1] != string[x] for x in range(1, len(string))):\n           lng = max(lng, len(string))\n    return lng\n       \n\n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    l = int(input().strip())\n\n    s = input()\n\n    result = alternate(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    enc = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                new_letter = ord(c.lower()) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter - 26).upper()\n                else:\n                    enc += chr(new_letter).upper()\n            else:\n                new_letter = ord(c) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter - 26)\n                else:\n                    enc += chr(new_letter)\n        else:\n            enc += c\n    return enc    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.3,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    enc = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                new_letter = ord(c.lower()) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter - 26 * k).upper()\n                else:\n                    enc += chr(new_letter).upper()\n            else:\n                new_letter = ord(c) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter - 26 * k)\n                else:\n                    enc += chr(new_letter)\n        else:\n            enc += c\n    return enc    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.1,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    if k \u003e 26:\n        k = k % 26\n\n    enc = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                new_letter = ord(c.lower()) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter - 26).upper()\n                else:\n                    enc += chr(new_letter).upper()\n            else:\n                new_letter = ord(c) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter - 26)\n                else:\n                    enc += chr(new_letter)\n        else:\n            enc += c\n    return enc    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    # if k \u003e 26:\n    #     k = k % 26\n\n    enc = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                new_letter = ord(c.lower()) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter % 26).upper()\n                else:\n                    enc += chr(new_letter).upper()\n            else:\n                new_letter = ord(c) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter % 26)\n                else:\n                    enc += chr(new_letter)\n        else:\n            enc += c\n    return enc    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.1,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    # if k \u003e 26:\n    #     k = k % 26\n\n    enc = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                new_letter = ord(c.lower()) + k  % 26\n                if new_letter \u003e 122:\n                    enc += chr(new_letter).upper()\n                else:\n                    enc += chr(new_letter).upper()\n            else:\n                new_letter = ord(c) + k  % 26\n                if new_letter \u003e 122:\n                    enc += chr(new_letter)\n                else:\n                    enc += chr(new_letter)\n        else:\n            enc += c\n    return enc    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.2,"language":"python3"},{"contest":"Master","challenge":"Caesar Cipher","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the caesarCipher function below.\ndef caesarCipher(s, k):\n    if k \u003e 26:\n        k = k % 26\n\n    enc = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                new_letter = ord(c.lower()) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter - 26).upper()\n                else:\n                    enc += chr(new_letter).upper()\n            else:\n                new_letter = ord(c) + k\n                if new_letter \u003e 122:\n                    enc += chr(new_letter - 26)\n                else:\n                    enc += chr(new_letter)\n        else:\n            enc += c\n    return enc    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    k = int(input())\n\n    result = caesarCipher(s, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    count = 0\n    for x in range(3, len(s), 3):\n        for letter in s[x: x + 3]:\n            if letter not in 'SOS':\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.222222222222,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    count = 0\n    for x in range(3, len(s), 3):\n        for x, y in zip(s[x:x+3], 'SOS'):\n            if x != y:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.555555555556,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    count = 0\n    for x in range( len(s), 3):\n        for x, y in zip(s[x:x+3], 'SOS'):\n            if x != y:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.222222222222,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    count = 0\n    for x in range(0, len(s), 2):\n        for x, y in zip(s[x:x+3], 'SOS'):\n            if x != y:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.111111111111,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    count = 0\n    for x in range(0, len(s), 3):\n        for x, y in zip(s[x:x+3], 'SOS'):\n            if x != y:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    count = 0\n    for x in range(0, len(s), 3):\n        # for x, y in zip(s[x:x+3], 'SOS'):\n        #     if x != y:\n        #         count += 1\n        count += sum([1 for x, y in zip(s[x:x+3],'SOS') if x!=y])\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    count = 0\n    #for x in range(0, len(s), 3):\n        # for x, y in zip(s[x:x+3], 'SOS'):\n        #     if x != y:\n        #         count += 1\n    count += sum([1 for x in range(0, len(s), 3) for x, y in zip(s[x:x+3],'SOS') if x!=y])\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    #count = 0\n    #for x in range(0, len(s), 3):\n        # for x, y in zip(s[x:x+3], 'SOS'):\n        #     if x != y:\n        #         count += 1\n    \n    return sum([1 for x in range(0, len(s), 3) for x, y in zip(s[x:x+3],'SOS') if x!=y])\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    #count = 0\n    #for x in range(0, len(s), 3):\n        # for x, y in zip(s[x:x+3], 'SOS'):\n        #     if x != y:\n        #         count += 1\n    \n    return sum([1 for x in range(0, len(s), 3) for z, y in zip(s[x:x+3],'SOS') if z !=y])\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mars Exploration","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the marsExploration function below.\ndef marsExploration(s):\n    #count = 0\n    #for x in range(0, len(s), 3):\n        # for x, y in zip(s[x:x+3], 'SOS'):\n        #     if x != y:\n        #         count += 1\n    \n    return sum([1 for x in range(0, len(s), 3) for z, y in zip(s[x:x+3],'SOS') if z!=y])\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = marsExploration(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"HackerRank in a String!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom itertools import combinations\n\n# Complete the hackerrankInString function below.\ndef hackerrankInString(s):\n    flag = \"NO\"\n    for word in combinations(s, 10):\n        if \"\".join(word) == 'hackerrank':\n            flag = 'YES'\n    return flag   \n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        s = input()\n\n        result = hackerrankInString(s)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.5,"language":"python3"},{"contest":"Master","challenge":"Pangrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the pangrams function below.\ndef pangrams(s):\n    return 'pangram' if len(set(s.lower().replace(\" \",\"\"))) == 26 else 'not panagrma'\n\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = pangrams(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.526315789474,"language":"python3"},{"contest":"Master","challenge":"Pangrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the pangrams function below.\ndef pangrams(s):\n    return 'pangram' if len(set(s.lower().replace(\" \",\"\"))) == 26 else 'not pangram'\n\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = pangrams(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Pangrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the pangrams function below.\ndef pangrams(s):\n    return 'pangram' if len(set(s.lower().replace(\" \",\"\"))) == 26 else 'not pangram'\n\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = pangrams(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"}],"teams":[],"contest_participations":[{"jobs_consent":null,"contest":"Master"},{"jobs_consent":null,"contest":"ProjectEuler+"}],"forum_comments":[{"contest":"Master","challenge":"Weighted Uniform Strings","description":"this is impossible to read","upvotes":2,"downvotes":0},{"contest":"Master","challenge":"The Captain's Room ","description":"```\nk,arr = int(input()),list(input().split())\nrooms = {}\nfor x in arr:\n    if x not in rooms:\n        rooms[x] = 1\n    else:\n        rooms[x] += 1\n\nprint(*[key for key, value in rooms.items() if value == 1])\n```","upvotes":0,"downvotes":0},{"contest":"Master","challenge":"Collections.deque()","description":"```\nfrom collections import deque\n\nd = deque()\n\nfor x in range(int(input())):\n    op, _, num = input().partition(\" \")\n    eval(f'd.{op}({num})')\n\nprint(*d)\n```","upvotes":0,"downvotes":0}],"all_ratings":[],"contest_medals":[],"survey_results":[],"messages_sent":[],"run_codes":[],"contests_created":[],"job_applications":[]}